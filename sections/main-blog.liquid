{{ 'component-article-card.css' | asset_url | stylesheet_tag }}
{{ 'component-card.css' | asset_url | stylesheet_tag }}
{{ 'section-main-blog.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
  .practice-list{ text-align:center; }
  .popupbtn{ background-color:#fafafa; color:#000; font-size:18px; min-width:100px; padding:6px 10px; border:1px solid; cursor:pointer;  }
  .popupoverlay{ position:absolute; top:0; left:0; background-color:#000; opacity:0.7; z-index:1; width:100%; height:100%; display:none; }
  .main-blog { position:relative; }
  .custom-popup{ position:relative; }
  .custom-popup{ min-height:50rem; position:relative; }
  .popupcontent{ background-color:#fff; padding:20px; position:absolute; left:0; right:0; width:50%;  top:50%; color:#000; z-index:2; margin:0 auto; display:none;  }
{%- endstyle -%}

{%- paginate blog.articles by 6 -%}
  <div class="main-blog page-width section-{{ section.id }}-padding">
    {%- render 'breadcrumb' -%}
    <div class="main-blog-header">
      <h6 class="h5">tsr blog</h6>
      <h1 class="title--primary{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--fade-in{% endif %}">
        {{ blog.title | escape }}
      </h1>
    </div> 
    </div>
<div class="blog-inner">
<div class="blog-content">
   {% assign blogs_list = 'news,recipes' | split: ',' %}
    {%- assign blog_cap = blank -%}
    {%- for blo in blogs_list -%}
      {%- assign temp_blog = blogs[blo] -%}
      {%- capture blog_cap -%}{{ blog_cap }}
        {%- if temp_blog != blank -%}
          <a class="tab-link {% if temp_blog.handle == blog.handle %}active{% endif %}" href="{{ temp_blog.url }}" data-tab="blog-articles">
            {% comment %}{% if temp_blog.handle == blog.handle %}Selected {% endif %}{% endcomment %}
            {% if temp_blog.title == "News" %}
              Default Blogs
            {% else %}
            {{ temp_blog.title }}
            {% endif %}
          </a>
        {%- endif -%}
      {%- endcapture -%}
    {%- endfor -%}
    {%- assign blog_cap = blog_cap | strip -%}
    {%- if blog_cap != blank -%}
    <div class="tab-nav">
    
      {{ blog_cap }}
    </div>
    {%- endif -%}
    
    <div class="blog-articles {% if section.settings.layout == 'collage' %}blog-articles--collage{% endif %}">
      {%- for article in blog.articles -%}
        <div
          class="blog-articles__article article{% if settings.animations_reveal_on_scroll %} scroll-trigger animate--slide-in{% endif %}"
          {% if settings.animations_reveal_on_scroll %}
            data-cascade
            style="--animation-order: {{ forloop.index }};"
          {% endif %}
        >
          {%- render 'article-card',
            article: article,
            media_height: section.settings.image_height,
            media_aspect_ratio: article.image.aspect_ratio,
            show_image: section.settings.show_image,
            show_date: section.settings.show_date,
            show_author: section.settings.show_author,
            show_excerpt: true
          -%}
        </div>
      {%- endfor -%}
    </div>
    </div>
      <div class="sidebar">
       <div class="blog-tags">
       <h4>Blog Tags: </h4>
       {% for tag in blog.tags %}
       
      <a href="{{ blog.url }}/tagged/{{ tag | handle }}" class="tag-link {% if current_tags contains tag %} active {% endif %} " > {{ tag }} </a>
       {% endfor %}
       </div>
      </div>

      </div>
    {%- if paginate.pages > 1 -%}
      {%- render 'pagination', paginate: paginate -%}
    {%- endif -%}
  </div>
{%- endpaginate -%}
  <div class="custom-learning page-width">
<h3>Js Learning </h3>
<p>Click the button to display the date.</p>
<p id="demo"></p>
<button class="btn" onclick="displayDate()">Check Time</button>
<br>
<br>
<div class="accordian" id="accordian" >
<div class="accordion-container">
  <div class="accordion">
    <button class="accordion-btn">Accordian</button>
    <div class="accordion-content">
      <p>This is the content of accordian.</p>
    </div>
  </div>
</div>
<br>
</div>
<div class="practice-list">
 <h2>Practice List</h2>
  
  <input type="text" id="task-input" placeholder="Enter a new task...">
  <button id="add-task-button" class="btn" >Add Task</button>

  <ul id="tasks"></ul>
 
<h5>Selecting Element by class</h5>
<div class="myClass">First Div</div>
<div class="myClass">second Div</div>
<h5>Selecting Element by tag</h5>
<div>Hello</div>
<div>World</div>
<h5>Selecting Element by querySelector</h5>
<div class="myClass">Hello</div>
<div class="myClass">World</div>
<h5>Selecting Element by querySelector</h5>
<div class="myClass">Hello</div>
<div class="myClass">World</div>

  <div class="container">
    <h1>Live Text Display with onkeyup</h1>
    <input type="text" id="textInput" placeholder="Type something..." onkeyup="displayText()" />
    <div class="output" id="textOutput"></div>
  </div>

<div class="practice-section">
<label>TO DO List </label>
<input id="input">
<button id="add" onclick="additems()" > Add </button>
<ul id = "listcontainer">
</ul>
</div>
  
<div class="custom-popup">
<div class="popup-inner">
  <button class="popupbtn">popup</button>
  <div class="popupoverlay"></div>
  <div class="popupcontent">
    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
 <button onclick="closee()" class="closebtn" > Close </button>
  </div>
</div>
</div>
  
</div>
<script>
var popupoverlay = document.querySelector(".popupoverlay")
var popupcontent = document.querySelector(".popupcontent")
var deletebtn = document.querySelector(".closebtn")
var buttonn= document.querySelector(".popupbtn")
buttonn.addEventListener( "click" , function(){
   popupoverlay.style.display = "block"
    popupcontent.style.display = "block"
});
deletebtn.addEventListener("click" , function(){
    popupoverlay.style.display = "none"
    popupcontent.style.display = "none"
})

  setTimeout(() => console.log("two second" ) , 2000);
</script>
    
<script>

  

var ul = document.getElementById("listcontainer")
var input = document.getElementById("input")
function additems(){
 var listitems = document.createElement("li")
listitems.innerHTML= input.value + " <button onclick ='deleteitems(event)'>Delete</button>"
ul.append(listitems)
}
function deleteitems(event){
event.target.parentElement.remove()
}

</script>
<script>
    function displayText() {
      var inputText = document.getElementById('textInput').value;
      document.getElementById('textOutput').textContent = inputText;
    }
  </script>
  <script>
   const divs = document.getElementsByTagName('div');
  console.log(divs[0].textContent);  // Output: Hello
  const divs = document.getElementsByClassName('myClass');
  console.log(divs[0].textContent);  // Output: Hello


    const taskInput = document.getElementById('task-input');
    const addTaskButton = document.getElementById('add-task-button');
    const taskList = document.getElementById('tasks');

   
    function addTask() {
      const taskText = taskInput.value.trim();

      if (taskText === '') {
        alert('Please enter a task!');
        return;
      }

      // Create the task item
      const li = document.createElement('li');
      li.classList.add('task');

   
      const taskContent = document.createElement('span');
      taskContent.textContent = taskText;
      li.appendChild(taskContent);

     
      li.addEventListener('click', function () {
        li.classList.toggle('completed');
      });
      const removeButton = document.createElement('button');
      removeButton.textContent = 'Remove';
      removeButton.classList.add('remove-btn');
      removeButton.addEventListener('click', function (event) {
        event.stopPropagation(); // Prevent the task from being toggled
        li.remove();
      });

      li.appendChild(removeButton);
      taskList.appendChild(li);
      taskInput.value = '';
    }
    addTaskButton.addEventListener('click', addTask);
    taskInput.addEventListener('keypress', function (e) {
      if (e.key === 'Enter') {
        addTask();
      }
    });
  </script>
<script>
function displayDate() {
  document.getElementById("demo").innerHTML = Date();
};


const accordionButtons = document.querySelectorAll('.accordion-btn');
accordionButtons.forEach(button => {
  button.addEventListener('click', function() {
    const accordion = this.parentElement;
    accordion.classList.toggle('active');
  });
});

</script>
{% schema %}
{
  "name": "t:sections.main-blog.name",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "header",
      "content": "t:sections.main-blog.settings.header.content"
    },
    {
      "type": "select",
      "id": "layout",
      "options": [
        {
          "value": "grid",
          "label": "t:sections.main-blog.settings.layout.options__1.label"
        },
        {
          "value": "collage",
          "label": "t:sections.main-blog.settings.layout.options__2.label"
        }
      ],
      "default": "collage",
      "label": "t:sections.main-blog.settings.layout.label",
      "info": "t:sections.main-blog.settings.layout.info"
    },
    {
      "type": "checkbox",
      "id": "show_image",
      "default": true,
      "label": "t:sections.main-blog.settings.show_image.label"
    },
    {
      "type": "select",
      "id": "image_height",
      "options": [
        {
          "value": "adapt",
          "label": "t:sections.main-blog.settings.image_height.options__1.label"
        },
        {
          "value": "small",
          "label": "t:sections.main-blog.settings.image_height.options__2.label"
        },
        {
          "value": "medium",
          "label": "t:sections.main-blog.settings.image_height.options__3.label"
        },
        {
          "value": "large",
          "label": "t:sections.main-blog.settings.image_height.options__4.label"
        }
      ],
      "default": "medium",
      "label": "t:sections.main-blog.settings.image_height.label",
      "info": "t:sections.main-blog.settings.image_height.info"
    },
    {
      "type": "checkbox",
      "id": "show_date",
      "default": true,
      "label": "t:sections.main-blog.settings.show_date.label"
    },
    {
      "type": "checkbox",
      "id": "show_author",
      "default": false,
      "label": "t:sections.main-blog.settings.show_author.label"
    },
    {
      "type": "paragraph",
      "content": "t:sections.main-blog.settings.paragraph.content"
    },
    {
      "type": "header",
      "content": "t:sections.all.padding.section_padding_heading"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_top",
      "default": 36
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "t:sections.all.padding.padding_bottom",
      "default": 36
    }
  ]
}
{% endschema %}
